// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/category": {
            "get": {
                "description": "get categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "List categories",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "showHidden",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ascending",
                            "descending"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "AscendingSort",
                            "DescendingSort"
                        ],
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Category"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "create category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Create category",
                "parameters": [
                    {
                        "description": "Add category",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddCategoryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/category/{id}": {
            "get": {
                "description": "get category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Get category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "update category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Update category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update category",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateCategoryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Delete category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Keep feeds",
                        "name": "keepFeeds",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/entry": {
            "get": {
                "description": "get entries",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entry"
                ],
                "summary": "List entries",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "feed",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "read",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ascending",
                            "descending"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "AscendingSort",
                            "DescendingSort"
                        ],
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "starred",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Entry"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "update entries",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entry"
                ],
                "summary": "Update entries",
                "parameters": [
                    {
                        "description": "Update entries",
                        "name": "entries",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateEntriesInput"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/entry/mark": {
            "post": {
                "description": "mark entries as read/unread up to a timestamp",
                "tags": [
                    "entry"
                ],
                "summary": "Mark as read/unread",
                "parameters": [
                    {
                        "enum": [
                            "read",
                            "unread"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "ReadEntryStatus",
                            "UnreadEntryStatus"
                        ],
                        "name": "as",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "feed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/entry/{id}": {
            "get": {
                "description": "get entry",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entry"
                ],
                "summary": "Get entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Entry"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "update entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entry"
                ],
                "summary": "Update entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update entry",
                        "name": "entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateEntryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Entry"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/entry/{id}/mark": {
            "post": {
                "description": "mark entry as read/unread",
                "tags": [
                    "entry"
                ],
                "summary": "Mark as read/unread",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "read",
                            "unread"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "ReadEntryStatus",
                            "UnreadEntryStatus"
                        ],
                        "name": "as",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/feed": {
            "get": {
                "description": "get feeds",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feed"
                ],
                "summary": "List feeds",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "showHidden",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ascending",
                            "descending"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "AscendingSort",
                            "DescendingSort"
                        ],
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Feed"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "create feed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feed"
                ],
                "summary": "Create feed",
                "parameters": [
                    {
                        "description": "Add feed",
                        "name": "feed",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddFeedInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Feed"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/feed/refresh": {
            "post": {
                "description": "refresh many feeds",
                "tags": [
                    "feed"
                ],
                "summary": "Refresh feeds",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category id",
                        "name": "category",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/feed/{id}": {
            "get": {
                "description": "get feed",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feed"
                ],
                "summary": "Get feed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Feed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Feed"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "update feed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feed"
                ],
                "summary": "Update feed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Feed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update feed",
                        "name": "feed",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateFeedInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Feed"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete feed",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feed"
                ],
                "summary": "Delete feed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Feed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/feed/{id}/icon": {
            "get": {
                "description": "get feed icon",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feed"
                ],
                "summary": "Get feed icon",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Feed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Feed"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/feed/{id}/refresh": {
            "post": {
                "description": "refresh feed",
                "tags": [
                    "feed"
                ],
                "summary": "Refresh feed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Feed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httputil.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.AddCategoryInput": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "visibility": {
                    "type": "integer"
                }
            }
        },
        "model.AddFeedInput": {
            "type": "object",
            "properties": {
                "categoryId": {
                    "type": "integer"
                },
                "feedUrl": {
                    "$ref": "#/definitions/url.URL"
                },
                "title": {
                    "type": "string"
                },
                "visibility": {
                    "$ref": "#/definitions/model.FeedVisibility"
                },
                "websiteUrl": {
                    "$ref": "#/definitions/url.URL"
                }
            }
        },
        "model.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "visibility": {
                    "type": "integer"
                }
            }
        },
        "model.Entry": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "collectedOn": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "feedId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "isMuted": {
                    "type": "boolean"
                },
                "isRead": {
                    "type": "boolean"
                },
                "isStarred": {
                    "type": "boolean"
                },
                "link": {
                    "$ref": "#/definitions/url.URL"
                },
                "originalId": {
                    "type": "string"
                },
                "publishedOn": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "model.EntryStatus": {
            "type": "string",
            "enum": [
                "read",
                "unread"
            ],
            "x-enum-varnames": [
                "ReadEntryStatus",
                "UnreadEntryStatus"
            ]
        },
        "model.Feed": {
            "type": "object",
            "properties": {
                "categoryId": {
                    "type": "integer"
                },
                "feedUrl": {
                    "$ref": "#/definitions/url.URL"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "visibility": {
                    "$ref": "#/definitions/model.FeedVisibility"
                },
                "websiteUrl": {
                    "$ref": "#/definitions/url.URL"
                }
            }
        },
        "model.FeedVisibility": {
            "type": "integer",
            "enum": [
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "ShowFeedVisibility",
                "ShowInCategoryFeedVisibility",
                "DoNotShowFeedVisibility"
            ]
        },
        "model.SortType": {
            "type": "string",
            "enum": [
                "ascending",
                "descending"
            ],
            "x-enum-varnames": [
                "AscendingSort",
                "DescendingSort"
            ]
        },
        "model.UpdateCategoryInput": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "visibility": {
                    "type": "integer"
                }
            }
        },
        "model.UpdateEntriesInput": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "isMuted": {
                    "type": "boolean"
                },
                "isRead": {
                    "type": "boolean"
                },
                "isStarred": {
                    "type": "boolean"
                }
            }
        },
        "model.UpdateEntryInput": {
            "type": "object",
            "properties": {
                "isMuted": {
                    "type": "boolean"
                },
                "isRead": {
                    "type": "boolean"
                },
                "isStarred": {
                    "type": "boolean"
                }
            }
        },
        "model.UpdateFeedInput": {
            "type": "object",
            "properties": {
                "categoryId": {
                    "type": "integer"
                },
                "feedUrl": {
                    "$ref": "#/definitions/url.URL"
                },
                "title": {
                    "type": "string"
                },
                "visibility": {
                    "$ref": "#/definitions/model.FeedVisibility"
                },
                "websiteUrl": {
                    "$ref": "#/definitions/url.URL"
                }
            }
        },
        "url.URL": {
            "type": "object",
            "properties": {
                "forceQuery": {
                    "description": "append a query ('?') even if RawQuery is empty",
                    "type": "boolean"
                },
                "fragment": {
                    "description": "fragment for references, without '#'",
                    "type": "string"
                },
                "host": {
                    "description": "host or host:port (see Hostname and Port methods)",
                    "type": "string"
                },
                "omitHost": {
                    "description": "do not emit empty host (authority)",
                    "type": "boolean"
                },
                "opaque": {
                    "description": "encoded opaque data",
                    "type": "string"
                },
                "path": {
                    "description": "path (relative paths may omit leading slash)",
                    "type": "string"
                },
                "rawFragment": {
                    "description": "encoded fragment hint (see EscapedFragment method)",
                    "type": "string"
                },
                "rawPath": {
                    "description": "encoded path hint (see EscapedPath method)",
                    "type": "string"
                },
                "rawQuery": {
                    "description": "encoded query values, without '?'",
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "user": {
                    "description": "username and password information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.Userinfo"
                        }
                    ]
                }
            }
        },
        "url.Userinfo": {
            "type": "object"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Gopherss API",
	Description:      "RSS feed management app",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
